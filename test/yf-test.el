(require 'ert)
(require 'yf)

(defun eval1 (text)
  (yf-clear)
  (yf-eval text))

(ert-deftest yf-arithmetics-test ()
  (should (equal (eval1 "1 1 +")
                 '((2 . "ANY"))))
  (should (equal (eval1 "1 -1 +")
                 '((0 . "ANY"))))
  (should (equal (eval1 "-10 -20 +")
                 '((-30 . "ANY"))))
  (should (equal (eval1 "1 0 -")
                 '((1 . "ANY"))))
  (should (equal (eval1 "-10 5 -")
                 '((-15 . "ANY"))))
  (should (equal (eval1 "10 2 -")
                 '((8 . "ANY"))))
  (should (equal (eval1 "3 10 -")
                 '((-7 . "ANY"))))
  (should (equal (eval1 "40 3 -")
                 '((37 . "ANY"))))
  (should (equal (eval1 "4 3 *")
                 '((12 . "ANY"))))
  (should (equal (eval1 "10 2 /")
                 '((5.0 . "ANY"))))
  (should (equal (eval1 "10 4 /")
                 '((2.5 . "ANY"))))
  (should (equal (eval1 "10 4 DIV")
                 '((2 . "ANY"))))
  (should (equal (eval1 "10 5 DIV")
                 '((2 . "ANY"))))
  (should (equal (eval1 "10 4 MOD")
                 '((2 . "ANY"))))
  (should (equal (eval1 "10 3 MOD")
                 '((1 . "ANY"))))
  (should (equal (eval1 "10 2 MOD")
                 '((0 . "ANY"))))
  (should (equal (eval1 "2 3 +")
                 '((5 . "ANY")))))

(ert-deftest yf-cmp-test ()
  (should (equal (eval1 "1 2 =") '( nil )))
  (should (equal (eval1 "2 2 =") '( t )))
  (should (equal (eval1 "0 0 =") '( t )))
  (should (equal (eval1 "1 2 <>") '( t )))
  (should (equal (eval1 "2 2 <>") '( nil )))
  (should (equal (eval1 "0 0 <>") '( nil )))
  (should (equal (eval1 "1 2 <") '( t )))
  (should (equal (eval1 "2 1 <") '( nil )))
  (should (equal (eval1 "1 2 <=") '( t )))
  (should (equal (eval1 "3 2 <=") '( nil )))
  (should (equal (eval1 "2 2 <=") '( t )))
  (should (equal (eval1 "-2 -1 <") '( t )))
  (should (equal (eval1 "-2 -2 <=") '( t )))
  (should (equal (eval1 "2 1 >") '( t )))
  (should (equal (eval1 "1 1 >") '( nil )))
  (should (equal (eval1 "2 2 >=") '( t )))
  (should (equal (eval1 "1 2 >=") '( nil )))
  (should (equal (eval1 "-1 -2 >") '( t )))
  (should (equal (eval1 "-3 -2 >") '( nil )))
  (should (equal (eval1 "-1 -2 >=") '( t ))))

(ert-deftest yf-logic-test ()
  (should (equal (eval1 "0 0 =  ( T ) 0 0 =  ( T ) AND") '( t )))
  (should (equal (eval1 "0 0 <> ( F ) 0 0 =  ( T ) AND") '( nil )))
  (should (equal (eval1 "0 0 =  ( T ) 0 0 <> ( F ) AND") '( nil )))
  (should (equal (eval1 "0 0 <> ( F ) 0 0 <> ( F ) AND") '( nil )))
  (should (equal (eval1 "0 0 =  ( T ) 0 0 =  ( T ) OR") '( t )))
  (should (equal (eval1 "0 0 <> ( F ) 0 0 =  ( T ) OR") '( t )))
  (should (equal (eval1 "0 0 =  ( T ) 0 0 <> ( F ) OR") '( t )))
  (should (equal (eval1 "0 0 <> ( F ) 0 0 <> ( F ) OR") '( nil )))
  (should (equal (eval1 "0 0 <> ( F ) not") '( t )))
  (should (equal (eval1 "0 0 =  ( T ) not") '( nil ))))

(ert-deftest yf-sum-test ()
  (should (equal (eval1 "sum") '()))
  (should (equal (eval1 "10 sum")
                 '((10 . "ANY"))))
  (should (equal (eval1 "2 3 4 5 sum")
                 '((14 . "ANY"))))
  (should (yf-currency-sets-equal (eval1 "4 USD 1 USD 6 EUR 2 EUR sum")
                 '((8 . "EUR") (5 . "USD"))))
  (should (yf-currency-sets-equal (eval1 "4 USD 1 USD 10 GBP 6 EUR 2 EUR sum")
                 '((8 . "EUR") (10 . "GBP") (5 . "USD"))))
  (should (yf-currency-sets-equal (eval1 "4 USD 2 1 USD 10 GBP 6 EUR 2 EUR 1 sum")
                 '((8 . "EUR") (10 . "GBP") (5 . "USD") (3 . "ANY"))))
  (should (yf-currency-sets-equal (eval1 "1 GBP 5 USD 8 HUF 10 EUR 20 EUR 30 EUR sum")
                 '((60 . "EUR") (8 . "HUF") (5 . "USD") (1 . "GBP")))))

(ert-deftest yf-wall-sum-test ()
  (should (equal (eval1 "wall sum") '()))
  (should (equal (eval1 "wall 10 sum") '((10 . "ANY"))))
  (should (equal (eval1 "5 wall 10 sum") '((10 . "ANY") (5 . "ANY"))))
  (should (equal (eval1 "5 7 8 wall 1 2 3 sum")
                 '((6 . "ANY") (8 . "ANY") (7 . "ANY") (5 . "ANY"))))
  (should (equal (eval1 "5 7 8 wall 1 2 3 sum sum") '((26 . "ANY"))))
  (should (equal (eval1 "4 wall 5 7 8 | 1 2 3 sum sum sum") '((30 . "ANY")))))

(ert-deftest yf-wall-sumprod-test ()
  (should (equal (eval1 "wall sumprod") '()))
  (should (equal (eval1 "wall 10 sumprod") '((10 . "ANY"))))
  (should (equal (eval1 "wall 10 20 sumprod") '((200 . "ANY"))))
  (should (equal (eval1 "wall 2 2 3 3 sumprod") '((13 . "ANY"))))
  (should (equal (eval1 "4 4 5 5 | 2 2 3 3 sumprod")
                 '((13 . "ANY") (5 . "ANY") (5 . "ANY") (4 . "ANY") (4 . "ANY"))))
  (should (equal (eval1 "5 5 13 wall 2 2 3 3 sumprod sumprod") '((194 . "ANY"))))
  (should (equal (eval1 "2 3 4 wall 5 5 13 | 2 2 3 3 sumprod sumprod sumprod")
                 '((782 . "ANY")))))

(ert-deftest yf-stack-test ()
  (should (equal (eval1 "4 dup")
                 '((4 . "ANY") (4 . "ANY"))))
  (should (equal (eval1 "3 dup *")
                 '((9 . "ANY"))))
  (should (equal (eval1 "6 7 swap")
                 '((6 . "ANY") (7 . "ANY"))))
  (should (equal (eval1 "6 7 swap swap")
                 '((7 . "ANY") (6 . "ANY"))))
  (should (equal (eval1 "3 7 swap -")
                 '((4 . "ANY"))))
  (should (equal (eval1 "1 2 over")
                 '((1 . "ANY") (2 . "ANY") (1 . "ANY"))))
  (should (equal (eval1 "1 2 3 rot")
                 '((1 . "ANY") (3 . "ANY") (2 . "ANY"))))
  (should (equal (eval1 "1 2 3 -rot")
                 '((2 . "ANY") (1 . "ANY") (3 . "ANY"))))
  (should (equal (eval1 "1 2 tuck")
                 '((2 . "ANY") (1 . "ANY") (2 . "ANY"))))
  (should (equal (eval1 "1 2 3 4 5 shift ")
                 '((4 . "ANY") (3 . "ANY") (2 . "ANY") (1 . "ANY") (5 . "ANY"))))
  (should (equal (eval1 "1 2 3 4 5 shift shift shift shift shift")
                 '((5 . "ANY") (4 . "ANY") (3 . "ANY") (2 . "ANY") (1 . "ANY"))))
  (should (equal (eval1 "3 drop") nil)))

(ert-deftest yf-depth-test ()
  (should (equal (eval1 "depth")
                 '((0 . "ANY"))))
  (should (equal (eval1 "0 depth")
                 '((1 . "ANY") (0 . "ANY"))))
  (should (equal (eval1 "1 1 1 1 depth")
                 '((4 . "ANY")
                   (1 . "ANY") (1 . "ANY") (1 . "ANY") (1 . "ANY")))))

(ert-deftest yf-clear-test ()
  (should (equal (eval1 "1 2 3 4 5 clear depth")
                 '((0 . "ANY")))))

(ert-deftest yf-comment-test ()
  (should (equal (eval1
                  "( comment 1 ) 3
                   ( comment 2 ) 4
                   ( comment 3 ) +
                   ( comment 4 )")
                 '((7 . "ANY")))))

(ert-deftest yf-multi-line-comment-test ()
  (should (equal (eval1
                  "( comment \n 1 2 3 \n ) \n 3 2 +
                   ( comment .. )")
                 '((5 . "ANY")))))

(ert-deftest yf-sumprod-test ()
  (should (equal (eval1 "sumprod") '()))
  (should (equal (eval1 "2 3 sumprod") '((6 . "ANY"))))
  (should (equal (eval1 "2 3 4 sumprod") '((14 . "ANY"))))
  (should (equal (eval1 "2 3 4 5 sumprod") '((26 . "ANY"))))
  (should (equal (eval1 "2 3 4 5 6 sumprod") '((44 . "ANY"))))
  (should (equal (eval1 "2 3 4 5 6 7 sumprod") '((68 . "ANY")))))

(ert-deftest yf-set-test ()
  (should (equal (eval1 "3.14 SET pi pi") '((3.14 . "ANY"))))
  (should (equal (eval1 "42 USD SET amt amt") '((42 . "USD"))))
  (eval1 "123 SET x")
  (eval1 "456 SET y")
  (should (equal (eval1 "x") '((123 . "ANY"))))
  (should (equal (eval1 "y") '((456 . "ANY"))))
  (should (equal (eval1 "x y +") '((579 . "ANY"))))
  (eval1 "1 SET i")
  (eval1 "i 1 + SET i")
  (eval1 "i 1 + SET i")
  (should (equal (eval1 "i") '((3 . "ANY")))))

(ert-deftest yf-quotation-test ()
  (should (equal (eval1 "1 [ 2 * ] 10 TIMES") '((1024 . "ANY"))))
  (should (equal (eval1 "( -- ) [ ( -- ) 2 ( -- ) DUP ( -- ) * ( -- ) ] ( -- ) CALL") '((4 . "ANY"))))
  (should (equal (eval1 "[ 12 USD ] CALL") '((12 . "USD"))))
  (should (equal (eval1 "12 [ TO EUR ] CALL") '((12 . "EUR"))))
  (should (equal (eval1 "12 [ [ TO EUR ] CALL ] CALL") '((12 . "EUR"))))
  (should (equal (eval1 "12 [ [ [ TO EUR ( -- ) ] ( -- ) CALL ] CALL ] CALL") '((12 . "EUR"))))
  (should (equal (eval1 "12 [ ( -- ) TO EUR ( -- ) ] CALL") '((12 . "EUR"))))
  (should (equal (eval1 "1 [ 2 * [ 1 + ] 3 TIMES ] 2 TIMES") '((13 . "ANY")))))

(ert-deftest yf-when-test ()
  (should (equal (eval1 "[ 4 5 < ] [ 5 2 - ] WHEN") '((3 . "ANY"))))
  (should (equal (eval1 "[ 4 5 < ] [ 42 ] WHEN") '((42 . "ANY"))))
  (should (equal (eval1 "100 [ 4 5 < ] [ drop 2 ] WHEN") '((2 . "ANY"))))
  (should (equal (eval1 "100 [ 4 5 < ] [ 2 / ] WHEN") '((50.0 . "ANY"))))
  (should (equal (eval1 "100 [ 10 5 < ] [ drop 2 ] WHEN") '((100 . "ANY"))))
  (should (equal (eval1 "100 [ 10 5 < ] [ 2 / ] WHEN") '((100 . "ANY")))))

(ert-deftest yf-unless-test ()
  (should (equal (eval1 "[ 4 5 > ] [ 5 2 - ] UNLESS") '((3 . "ANY"))))
  (should (equal (eval1 "[ 4 5 > ] [ 42 ] UNLESS") '((42 . "ANY"))))
  (should (equal (eval1 "100 [ 4 5 < ] [ drop 2 ] UNLESS") '((100 . "ANY"))))
  (should (equal (eval1 "100 [ 4 5 < ] [ 2 / ] UNLESS") '((100 . "ANY"))))
  (should (equal (eval1 "100 [ 10 5 < ] [ drop 2 ] UNLESS") '((2 . "ANY"))))
  (should (equal (eval1 "100 [ 10 5 < ] [ 2 / ] UNLESS") '((50.0 . "ANY")))))

(ert-deftest yf-if-test ()
  (should (equal (eval1 "[ 4 5 < ] [ 10 ] [ 2 ] IF") '((10 . "ANY"))))
  (should (equal (eval1 "3 [ 1 2 < ] [ DUP * ] [ DROP ] IF") '((9 . "ANY"))))
  (should (equal (eval1 "[ 4 5 > ] [ 10 ] [ 2 ] IF") '((2 . "ANY"))))
  (should (equal (eval1 "5 3 [ OVER OVER < ] [ SWAP DROP ] [ DROP ] IF") '((5 . "ANY"))))
  (should (equal (eval1 "5 8 [ OVER OVER < ] [ SWAP DROP ] [ DROP ] IF") '((8 . "ANY"))))
  (should (equal (eval1 "5 3 [ OVER OVER < ] [ DROP ] [ SWAP DROP ] IF") '((3 . "ANY"))))
  (should (equal (eval1 "5 8 [ OVER OVER < ] [ DROP ] [ SWAP DROP ] IF") '((5 . "ANY")))))

(ert-deftest yf-while-test ()
  (should (equal (eval1 "1 [ DUP 10 < ] [ 1 + ] WHILE") '((10 . "ANY")))))

(ert-deftest yf-until-test ()
  (should (equal (eval1 "1 [ 1 + DUP 10 > ] UNTIL") '((11 . "ANY")))))
  (should (equal (eval1
"1
 [
   1 +
   DUP DUP *
   1000000 MOD
   269696 =
 ] UNTIL") '((25264 . "ANY"))))

(ert-deftest yf-str-test ()
  (should (equal (eval1 "\"Hello World !\"") '("Hello World !"))))

(ert-deftest yf-nil-test ()
  (should (equal (eval1 "nil") '(nil))))

(ert-deftest yf-forge-test ()
  (eval1 "[ 1 + ] FORGE INC")
  (eval1 "[ DUP * ] FORGE SQUARE")
  (eval1 "[ SQUARE INC ] FORGE SQUARE+1")
  (should (equal (eval1 "3 INC") '((4 . "ANY"))))
  (should (equal (eval1 "3 SQUARE") '((9 . "ANY"))))
  (should (equal (eval1 "3 SQUARE+1") '((10 . "ANY")))))

(defun yf-currency-sets-equal (a b)
  (equal (cl-sort (copy-sequence a) #'string< :key #'cdr)
         (cl-sort (copy-sequence b) #'string< :key #'cdr)))
